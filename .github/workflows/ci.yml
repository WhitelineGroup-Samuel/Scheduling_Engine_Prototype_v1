# =============================================================================
# File: .github/workflows/ci.yml
# Purpose:
#   Continuous Integration pipeline: lint -> type-check -> tests.
#
# Responsibilities:
#   - Run on pull_request and push.
#   - Cache dependencies, set up Python, run Make targets.
#
# Collaborators:
#   - pyproject.toml, mypy.ini, ruff.toml, pytest.ini
# =============================================================================

name: ci

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.12"
  APP_ENV: test
  LOG_LEVEL: INFO
  TIMEZONE: Australia/Melbourne
  LOG_JSON: "false"
  SKIP_ALL_TESTS: "1"

jobs:
  quality:
    name: quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Cache pre-commit hook environments for speed
      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ env.PYTHON_VERSION }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-precommit-${{ env.PYTHON_VERSION }}-

      # (Optional) Cache pip in case some hooks need wheels at build time
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

      # IMPORTANT: Run your local hooks exactly as you do locally
      - name: Run pre-commit (all hooks, all files)
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files

  tests:
    name: tests
    runs-on: ubuntu-latest
    needs: quality

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: scheduling_test
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready -U postgres -d scheduling_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/scheduling_test
      APP_ENV: test
      LOG_LEVEL: INFO
      TIMEZONE: Australia/Melbourne
      LOG_JSON: "false"
      SKIP_ALL_TESTS: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres -d scheduling_test && break
            sleep 1
          done

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/ruff.toml', '**/mypy.ini') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

      - name: Install deps (runtime + pytest)
        run: |
          python -m pip install --upgrade pip
          # Install your project with dev extras; FAIL if this fails (no "|| true")
          pip install -e ".[dev]"
          # Ensure EmailStr works by installing the email extra for Pydantic
          pip install "pydantic[email]"
          # (Optional) Explicit pins for stubs used by type checking in tests
          pip install types-requests types-python-dateutil

      # Optional: Run Migrations here once Alembic is wired
      # - name: Alembic upgrade head
      #   run: alembic upgrade head

      - name: Run tests (default suite)
        if: ${{ env.SKIP_ALL_TESTS != '1' }}
        run: pytest -q

      - name: (Optional) Coverage report
        if: ${{ env.SKIP_ALL_TESTS != '1' }}
        run: |
          if python -c "import importlib.util; print(importlib.util.find_spec('pytest_cov') is not None)"; then
            pytest --cov=app --cov-report=term-missing || true
          fi

      - name: (Optional) Security audit (non-blocking)
        if: always()
        run: |
          pip install pip-audit || true
          pip-audit || true
