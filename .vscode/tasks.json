// =============================================================================
// File: .vscode/tasks.json
// Purpose:
//   Developer tasks for common flows with consistent env selection.
//   - Lint / type-check / tests
//   - Alembic inspection & upgrades (no DB creation here)
//   - Seeding (dry-run/apply) via manage.py
//
// Conventions:
//   - Dev runs use:  APP_ENV=dev  and ENV_FILE=.env
//   - Tests use:     APP_ENV=test and ENV_FILE=.env.test
//   - We activate .venv explicitly so tools resolve correctly.
// =============================================================================
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "fmt: black",
      "type": "shell",
      "command": ". .venv/bin/activate && black app tests",
      "problemMatcher": []
    },
    {
      "label": "lint: ruff",
      "type": "shell",
      "command": ". .venv/bin/activate && ruff check app tests",
      "problemMatcher": []
    },
    {
      "label": "type: mypy",
      "type": "shell",
      "command": ". .venv/bin/activate && mypy app",
      "problemMatcher": []
    },
    {
      "label": "test: pytest (unit/smoke)",
      "type": "shell",
      "command": ". .venv/bin/activate && APP_ENV=test ENV_FILE=.env.test pytest -q -ra",
      "problemMatcher": []
    },
    {
      "label": "hooks: pre-commit install",
      "type": "shell",
      "command": ". .venv/bin/activate && pre-commit install",
      "problemMatcher": []
    },
    {
      "label": "hooks: run all",
      "type": "shell",
      "command": ". .venv/bin/activate && pre-commit run --all-files",
      "problemMatcher": []
    },
    {
      "label": "DB: Begin",
      "type": "shell",
      "command": ". .venv/bin/activate && make db-begin",
      "options": {
        "cwd": "${workspaceFolder}",
        "shell": {
          "executable": "/bin/bash",
          "args": [
            "-lc"
          ]
        }
      },
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "focus": true,
        "clear": true
      },
      "problemMatcher": []
    }
  ]
}
