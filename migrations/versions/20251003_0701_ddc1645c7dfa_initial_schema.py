"""initial schema

Revision ID: ddc1645c7dfa
Revises:
Create Date: 2025-10-03 07:01:11.520140+00:00
"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "ddc1645c7dfa"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "dates",
        sa.Column("date_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("date_value", sa.Date(), nullable=False),
        sa.Column("date_day", sa.Text(), nullable=False),
        sa.Column("calendar_year", sa.Integer(), nullable=False),
        sa.Column("iso_week_int", sa.Integer(), nullable=False),
        sa.Column("is_weekend", sa.Boolean(), nullable=False),
        sa.Column("is_public_holiday", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("date_id", name=op.f("pk_dates")),
        sa.UniqueConstraint("date_value", name="uq_dates_date_value"),
    )
    op.create_index("idx_dates_date_value", "dates", ["date_value"], unique=False)
    op.create_table(
        "default_times",
        sa.Column("time_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("time_value", sa.Time(), nullable=False),
        sa.PrimaryKeyConstraint("time_id", name=op.f("pk_default_times")),
        sa.UniqueConstraint("time_value", name="uq_default_times_time_value"),
    )
    op.create_index("idx_default_times_time_value", "default_times", ["time_value"], unique=False)
    op.create_table(
        "users",
        sa.Column("user_account_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("display_name", sa.Text(), nullable=False),
        sa.Column("email", sa.Text(), nullable=False),
        sa.Column("is_active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("user_account_id", name=op.f("pk_users")),
        sa.UniqueConstraint("email", name="uq_users_email"),
    )
    op.create_table(
        "organisations",
        sa.Column("organisation_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("organisation_name", sa.Text(), nullable=False),
        sa.Column("time_zone", sa.Text(), nullable=True),
        sa.Column("country_code", sa.Text(), nullable=True),
        sa.Column("slug", sa.String(length=64), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_organisations_users_created_by_user_id"),
        ),
        sa.PrimaryKeyConstraint("organisation_id", name=op.f("pk_organisations")),
        sa.UniqueConstraint("organisation_name", name="uq_organisations_organisation_name"),
        sa.UniqueConstraint("slug", name="uq_organisations_slug"),
    )
    op.create_index(
        "idx_organisations_created_by",
        "organisations",
        ["created_by_user_id"],
        unique=False,
    )
    op.create_table(
        "public_holidays",
        sa.Column("public_holiday_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("date_id", sa.Integer(), nullable=False),
        sa.Column("holiday_name", sa.Text(), nullable=False),
        sa.Column("holiday_region", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["date_id"],
            ["dates.date_id"],
            name=op.f("fk_public_holidays_dates_date_id"),
        ),
        sa.PrimaryKeyConstraint("public_holiday_id", name=op.f("pk_public_holidays")),
    )
    op.create_table(
        "competitions",
        sa.Column("competition_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("organisation_id", sa.Integer(), nullable=False),
        sa.Column("competition_name", sa.Text(), nullable=False),
        sa.Column("active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=True),
        sa.Column("slug", sa.String(length=64), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_competitions_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["organisation_id"],
            ["organisations.organisation_id"],
            name=op.f("fk_competitions_organisations_organisation_id"),
        ),
        sa.PrimaryKeyConstraint("competition_id", name=op.f("pk_competitions")),
        sa.UniqueConstraint("organisation_id", "competition_name", name="uq_competitions_org_name"),
        sa.UniqueConstraint("organisation_id", "slug", name="uq_competitions_org_slug"),
    )
    op.create_index(
        "idx_competitions_created_by",
        "competitions",
        ["created_by_user_id"],
        unique=False,
    )
    op.create_index("idx_competitions_org", "competitions", ["organisation_id"], unique=False)
    op.create_table(
        "user_permissions",
        sa.Column("permission_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_account_id", sa.Integer(), nullable=False),
        sa.Column("organisation_id", sa.Integer(), nullable=False),
        sa.Column("can_schedule", sa.Boolean(), server_default=sa.text("TRUE"), nullable=False),
        sa.Column("can_approve", sa.Boolean(), server_default=sa.text("TRUE"), nullable=False),
        sa.Column("can_export", sa.Boolean(), server_default=sa.text("TRUE"), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["organisation_id"],
            ["organisations.organisation_id"],
            name=op.f("fk_user_permissions_organisations_organisation_id"),
        ),
        sa.ForeignKeyConstraint(
            ["user_account_id"],
            ["users.user_account_id"],
            name=op.f("fk_user_permissions_users_user_account_id"),
        ),
        sa.PrimaryKeyConstraint("permission_id", name=op.f("pk_user_permissions")),
        sa.UniqueConstraint("user_account_id", "organisation_id", name="uq_user_permissions_user_org"),
    )
    op.create_index(
        "idx_user_permissions_org",
        "user_permissions",
        ["organisation_id"],
        unique=False,
    )
    op.create_index(
        "idx_user_permissions_user",
        "user_permissions",
        ["user_account_id"],
        unique=False,
    )
    op.create_table(
        "venues",
        sa.Column("venue_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("organisation_id", sa.Integer(), nullable=False),
        sa.Column("venue_name", sa.Text(), nullable=False),
        sa.Column("venue_address", sa.Text(), nullable=False),
        sa.Column("display_order", sa.Integer(), nullable=False),
        sa.Column("latitude", sa.Numeric(precision=9, scale=6), nullable=True),
        sa.Column("longitude", sa.Numeric(precision=9, scale=6), nullable=True),
        sa.Column("indoor", sa.Boolean(), server_default=sa.text("TRUE"), nullable=True),
        sa.Column("accessible", sa.Boolean(), server_default=sa.text("TRUE"), nullable=True),
        sa.Column("total_courts", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_venues_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["organisation_id"],
            ["organisations.organisation_id"],
            name=op.f("fk_venues_organisations_organisation_id"),
        ),
        sa.PrimaryKeyConstraint("venue_id", name=op.f("pk_venues")),
        sa.UniqueConstraint("venue_name", "venue_address", name="uq_venues_name_address"),
    )
    op.create_index("idx_venues_created_by", "venues", ["created_by_user_id"], unique=False)
    op.create_table(
        "courts",
        sa.Column("court_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("venue_id", sa.Integer(), nullable=False),
        sa.Column("court_code", sa.String(length=20), nullable=False),
        sa.Column("court_name", sa.Text(), nullable=False),
        sa.Column("display_order", sa.Integer(), nullable=False),
        sa.Column("surface", sa.Text(), nullable=True),
        sa.Column("indoor", sa.Boolean(), server_default=sa.text("TRUE"), nullable=True),
        sa.Column("active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_courts_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(["venue_id"], ["venues.venue_id"], name=op.f("fk_courts_venues_venue_id")),
        sa.PrimaryKeyConstraint("court_id", name=op.f("pk_courts")),
        sa.UniqueConstraint("venue_id", "court_code", name="uq_courts_venue_code"),
        sa.UniqueConstraint("venue_id", "court_name", name="uq_courts_venue_name"),
        sa.UniqueConstraint("venue_id", "display_order", name="uq_courts_venue_display"),
    )
    op.create_index("idx_courts_active", "courts", ["active"], unique=False)
    op.create_index("idx_courts_venue", "courts", ["venue_id"], unique=False)
    op.create_table(
        "seasons",
        sa.Column("season_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("competition_id", sa.Integer(), nullable=False),
        sa.Column("season_name", sa.Text(), nullable=False),
        sa.Column("starting_date", sa.Date(), nullable=True),
        sa.Column("ending_date", sa.Date(), nullable=True),
        sa.Column("visibility", sa.Text(), nullable=False),
        sa.Column("active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=True),
        sa.Column("slug", sa.String(length=64), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["competition_id"],
            ["competitions.competition_id"],
            name=op.f("fk_seasons_competitions_competition_id"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_seasons_users_created_by_user_id"),
        ),
        sa.PrimaryKeyConstraint("season_id", name=op.f("pk_seasons")),
        sa.UniqueConstraint("competition_id", "season_name", name="uq_seasons_competition_name"),
        sa.UniqueConstraint("competition_id", "slug", name="uq_seasons_comp_slug"),
    )
    op.create_index("idx_seasons_comp", "seasons", ["competition_id"], unique=False)
    op.create_index("idx_seasons_created_by", "seasons", ["created_by_user_id"], unique=False)
    op.create_index(
        "idx_seasons_visibility_active",
        "seasons",
        ["visibility", "active"],
        unique=False,
    )
    op.create_table(
        "rounds",
        sa.Column("round_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("season_id", sa.Integer(), nullable=False),
        sa.Column("round_number", sa.Integer(), nullable=False),
        sa.Column("round_label", sa.Text(), nullable=False),
        sa.Column("round_type", sa.Text(), nullable=False),
        sa.Column(
            "round_status",
            sa.Text(),
            server_default=sa.text("'PLANNED'"),
            nullable=False,
        ),
        sa.Column("published_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "round_status IN ('PLANNED','SCHEDULED','PUBLISHED','COMPLETED','CANCELLED')",
            name=op.f("ck_rounds_chk_rounds_round_status"),
        ),
        sa.CheckConstraint(
            "round_type IN ('GRADING','REGULAR','FINALS')",
            name=op.f("ck_rounds_chk_rounds_round_type"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_rounds_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["season_id"],
            ["seasons.season_id"],
            name=op.f("fk_rounds_seasons_season_id"),
        ),
        sa.PrimaryKeyConstraint("round_id", name=op.f("pk_rounds")),
        sa.UniqueConstraint("season_id", "round_label", name="uq_rounds_season_label"),
        sa.UniqueConstraint("season_id", "round_number", name="uq_rounds_season_number"),
    )
    op.create_table(
        "season_days",
        sa.Column("season_day_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("season_id", sa.Integer(), nullable=False),
        sa.Column("season_day_name", sa.Text(), nullable=False),
        sa.Column("season_day_label", sa.Text(), nullable=True),
        sa.Column("week_day", sa.Integer(), nullable=False),
        sa.Column("window_start", sa.Time(), nullable=False),
        sa.Column("window_end", sa.Time(), nullable=False),
        sa.Column("active", sa.Boolean(), server_default=sa.text("FALSE"), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "week_day BETWEEN 1 AND 7",
            name=op.f("ck_season_days_chk_season_days_week_day_range"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_season_days_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["season_id"],
            ["seasons.season_id"],
            name=op.f("fk_season_days_seasons_season_id"),
        ),
        sa.PrimaryKeyConstraint("season_day_id", name=op.f("pk_season_days")),
        sa.UniqueConstraint("season_id", "season_day_name", name="uq_season_days_name"),
        sa.UniqueConstraint("season_id", "week_day", name="uq_season_days_weekday"),
    )
    op.create_index("idx_season_days_active", "season_days", ["active"], unique=False)
    op.create_index("idx_season_days_season", "season_days", ["season_id"], unique=False)
    op.create_index("idx_season_days_week_day", "season_days", ["week_day"], unique=False)
    op.create_table(
        "ages",
        sa.Column("age_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("season_day_id", sa.Integer(), nullable=False),
        sa.Column("age_code", sa.String(length=20), nullable=False),
        sa.Column("age_name", sa.Text(), nullable=False),
        sa.Column("gender", sa.Text(), nullable=True),
        sa.Column("age_rank", sa.Integer(), nullable=False),
        sa.Column("age_required_games", sa.Integer(), nullable=True),
        sa.Column("active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_ages_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["season_day_id"],
            ["season_days.season_day_id"],
            name=op.f("fk_ages_season_days_season_day_id"),
        ),
        sa.PrimaryKeyConstraint("age_id", name=op.f("pk_ages")),
        sa.UniqueConstraint("season_day_id", "age_code", name="uq_ages_code"),
        sa.UniqueConstraint("season_day_id", "age_name", name="uq_ages_name"),
        sa.UniqueConstraint("season_day_id", "age_rank", name="uq_ages_rank"),
    )
    op.create_index("idx_ages_active", "ages", ["active"], unique=False)
    op.create_table(
        "round_dates",
        sa.Column("round_date_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("date_id", sa.Integer(), nullable=False),
        sa.Column("round_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_round_dates_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(["date_id"], ["dates.date_id"], name=op.f("fk_round_dates_dates_date_id")),
        sa.ForeignKeyConstraint(
            ["round_id"],
            ["rounds.round_id"],
            name=op.f("fk_round_dates_rounds_round_id"),
        ),
        sa.PrimaryKeyConstraint("round_date_id", name=op.f("pk_round_dates")),
        sa.UniqueConstraint("round_id", "date_id", name="uq_round_dates_round_date"),
    )
    op.create_index("idx_round_dates_date", "round_dates", ["date_id"], unique=False)
    op.create_index("idx_round_dates_round", "round_dates", ["round_id"], unique=False)
    op.create_table(
        "round_settings",
        sa.Column("round_setting_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("season_day_id", sa.Integer(), nullable=False),
        sa.Column("round_settings_number", sa.Integer(), nullable=False),
        sa.Column("rules", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_round_settings_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["season_day_id"],
            ["season_days.season_day_id"],
            name=op.f("fk_round_settings_season_days_season_day_id"),
        ),
        sa.PrimaryKeyConstraint("round_setting_id", name=op.f("pk_round_settings")),
        sa.UniqueConstraint(
            "season_day_id",
            "round_settings_number",
            name="uq_round_settings_day_number",
        ),
    )
    op.create_index("idx_round_settings_day", "round_settings", ["season_day_id"], unique=False)
    op.create_table(
        "scheduling_runs",
        sa.Column("run_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("season_id", sa.Integer(), nullable=False),
        sa.Column("season_day_id", sa.Integer(), nullable=False),
        sa.Column("run_status", sa.Text(), nullable=False),
        sa.Column("process_type", sa.Text(), nullable=False),
        sa.Column("run_type", sa.Text(), nullable=True),
        sa.Column("s1_check_results", sa.Text(), nullable=False),
        sa.Column("round_ids", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("seed_master", sa.Text(), nullable=False),
        sa.Column("resume_checkpoint", sa.Text(), nullable=False),
        sa.Column("config_hash", sa.Text(), nullable=True),
        sa.Column("idempotency_key", sa.Text(), nullable=False),
        sa.Column("metrics", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("error_code", sa.Text(), nullable=True),
        sa.Column("error_details", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("finished_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "(run_type IS NULL) OR (run_type IN ('I_RUN_1','I_RUN_2','M_RUN_1','M_RUN_2','M_RUN_3'))",
            name=op.f("ck_scheduling_runs_chk_scheduling_runs_run_type"),
        ),
        sa.CheckConstraint(
            "process_type IN ('INITIAL','MID')",
            name=op.f("ck_scheduling_runs_chk_scheduling_runs_process_type"),
        ),
        sa.CheckConstraint(
            "resume_checkpoint IN ('BEFORE_P2','AFTER_P2_BEFORE_P3','AFTER_P3_BEFORE_FINALISE','FINALISED')",
            name=op.f("ck_scheduling_runs_chk_scheduling_runs_resume_checkpoint"),
        ),
        sa.CheckConstraint(
            "run_status IN ('PENDING','RUNNING','FAILED','SUCCEEDED','ABANDONED')",
            name=op.f("ck_scheduling_runs_chk_scheduling_runs_run_status"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_scheduling_runs_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["season_day_id"],
            ["season_days.season_day_id"],
            name=op.f("fk_scheduling_runs_season_days_season_day_id"),
        ),
        sa.ForeignKeyConstraint(
            ["season_id"],
            ["seasons.season_id"],
            name=op.f("fk_scheduling_runs_seasons_season_id"),
        ),
        sa.PrimaryKeyConstraint("run_id", name=op.f("pk_scheduling_runs")),
        sa.UniqueConstraint("idempotency_key", name="uq_scheduling_runs_idempotency_key"),
    )
    op.create_index("idx_runs_created_at", "scheduling_runs", ["created_at"], unique=False)
    op.create_index("idx_runs_created_by", "scheduling_runs", ["created_by_user_id"], unique=False)
    op.create_index("idx_runs_season_day", "scheduling_runs", ["season_day_id"], unique=False)
    op.create_index("idx_runs_status", "scheduling_runs", ["run_status"], unique=False)
    op.create_table(
        "time_slots",
        sa.Column("time_slot_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("season_day_id", sa.Integer(), nullable=False),
        sa.Column("start_time_id", sa.Integer(), nullable=False),
        sa.Column("end_time_id", sa.Integer(), nullable=False),
        sa.Column("start_time", sa.Time(), nullable=False),
        sa.Column("end_time", sa.Time(), nullable=False),
        sa.Column("time_slot_label", sa.Text(), nullable=False),
        sa.Column("buffer_minutes", sa.Integer(), nullable=False),
        sa.Column("duration_minutes", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_time_slots_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["end_time_id"],
            ["default_times.time_id"],
            name=op.f("fk_time_slots_default_times_end_time_id"),
        ),
        sa.ForeignKeyConstraint(
            ["season_day_id"],
            ["season_days.season_day_id"],
            name=op.f("fk_time_slots_season_days_season_day_id"),
        ),
        sa.ForeignKeyConstraint(
            ["start_time_id"],
            ["default_times.time_id"],
            name=op.f("fk_time_slots_default_times_start_time_id"),
        ),
        sa.PrimaryKeyConstraint("time_slot_id", name=op.f("pk_time_slots")),
        sa.UniqueConstraint("season_day_id", "start_time", "end_time", name="uq_time_slots_day_window"),
        sa.UniqueConstraint("season_day_id", "time_slot_label", name="uq_time_slots_day_label"),
    )
    op.create_index("idx_time_slots_day", "time_slots", ["season_day_id"], unique=False)
    op.create_index(
        "idx_time_slots_start_end",
        "time_slots",
        ["start_time", "end_time"],
        unique=False,
    )
    op.create_table(
        "age_round_constraints",
        sa.Column("age_round_constraint_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("round_setting_id", sa.Integer(), nullable=False),
        sa.Column("age_id", sa.Integer(), nullable=False),
        sa.Column("active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["age_id"],
            ["ages.age_id"],
            name=op.f("fk_age_round_constraints_ages_age_id"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_age_round_constraints_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_setting_id"],
            ["round_settings.round_setting_id"],
            name=op.f("fk_age_round_constraints_round_settings_round_setting_id"),
        ),
        sa.PrimaryKeyConstraint("age_round_constraint_id", name=op.f("pk_age_round_constraints")),
        sa.UniqueConstraint("round_setting_id", "age_id", name="uq_age_round_constraints_key"),
    )
    op.create_index(
        "idx_age_round_constraints_keys",
        "age_round_constraints",
        ["round_setting_id", "age_id"],
        unique=False,
    )
    op.create_table(
        "court_rankings",
        sa.Column("court_rank_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("court_id", sa.Integer(), nullable=False),
        sa.Column("season_day_id", sa.Integer(), nullable=False),
        sa.Column("round_setting_id", sa.Integer(), nullable=False),
        sa.Column("court_rank", sa.Integer(), nullable=False),
        sa.Column("overridden", sa.Boolean(), server_default=sa.text("FALSE"), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_by_user_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["court_id"],
            ["courts.court_id"],
            name=op.f("fk_court_rankings_courts_court_id"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_court_rankings_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_setting_id"],
            ["round_settings.round_setting_id"],
            name=op.f("fk_court_rankings_round_settings_round_setting_id"),
        ),
        sa.ForeignKeyConstraint(
            ["season_day_id"],
            ["season_days.season_day_id"],
            name=op.f("fk_court_rankings_season_days_season_day_id"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_court_rankings_users_updated_by_user_id"),
        ),
        sa.PrimaryKeyConstraint("court_rank_id", name=op.f("pk_court_rankings")),
    )
    op.create_table(
        "court_times",
        sa.Column("court_time_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("season_day_id", sa.Integer(), nullable=False),
        sa.Column("round_setting_id", sa.Integer(), nullable=False),
        sa.Column("court_id", sa.Integer(), nullable=False),
        sa.Column("time_slot_id", sa.Integer(), nullable=False),
        sa.Column(
            "availability_status",
            sa.Text(),
            server_default=sa.text("'AVAILABLE'"),
            nullable=False,
        ),
        sa.Column("lock_state", sa.Text(), server_default=sa.text("'OPEN'"), nullable=False),
        sa.Column("block_reason", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_by_user_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["court_id"],
            ["courts.court_id"],
            name=op.f("fk_court_times_courts_court_id"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_court_times_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_setting_id"],
            ["round_settings.round_setting_id"],
            name=op.f("fk_court_times_round_settings_round_setting_id"),
        ),
        sa.ForeignKeyConstraint(
            ["season_day_id"],
            ["season_days.season_day_id"],
            name=op.f("fk_court_times_season_days_season_day_id"),
        ),
        sa.ForeignKeyConstraint(
            ["time_slot_id"],
            ["time_slots.time_slot_id"],
            name=op.f("fk_court_times_time_slots_time_slot_id"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_court_times_users_updated_by_user_id"),
        ),
        sa.PrimaryKeyConstraint("court_time_id", name=op.f("pk_court_times")),
        sa.UniqueConstraint(
            "season_day_id",
            "round_setting_id",
            "court_id",
            "time_slot_id",
            name="uq_court_times_key",
        ),
    )
    op.create_index("idx_court_times_court", "court_times", ["court_id"], unique=False)
    op.create_index(
        "idx_court_times_day_setting",
        "court_times",
        ["season_day_id", "round_setting_id"],
        unique=False,
    )
    op.create_index("idx_court_times_time_slot", "court_times", ["time_slot_id"], unique=False)
    op.create_table(
        "grades",
        sa.Column("grade_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("age_id", sa.Integer(), nullable=False),
        sa.Column("grade_code", sa.String(length=20), nullable=False),
        sa.Column("grade_name", sa.Text(), nullable=False),
        sa.Column("grade_rank", sa.Integer(), nullable=False),
        sa.Column("grade_required_games", sa.Integer(), nullable=True),
        sa.Column(
            "bye_requirement",
            sa.Boolean(),
            server_default=sa.text("FALSE"),
            nullable=True,
        ),
        sa.Column("active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=True),
        sa.Column("display_colour", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["age_id"], ["ages.age_id"], name=op.f("fk_grades_ages_age_id")),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_grades_users_created_by_user_id"),
        ),
        sa.PrimaryKeyConstraint("grade_id", name=op.f("pk_grades")),
        sa.UniqueConstraint("age_id", "grade_code", name="uq_grades_code"),
        sa.UniqueConstraint("age_id", "grade_name", name="uq_grades_name"),
        sa.UniqueConstraint("age_id", "grade_rank", name="uq_grades_rank"),
    )
    op.create_index("idx_grades_age", "grades", ["age_id"], unique=False)
    op.create_table(
        "round_groups",
        sa.Column("round_group_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("round_id", sa.Integer(), nullable=False),
        sa.Column("round_setting_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_round_groups_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_id"],
            ["rounds.round_id"],
            name=op.f("fk_round_groups_rounds_round_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_setting_id"],
            ["round_settings.round_setting_id"],
            name=op.f("fk_round_groups_round_settings_round_setting_id"),
        ),
        sa.PrimaryKeyConstraint("round_group_id", name=op.f("pk_round_groups")),
        sa.UniqueConstraint("round_id", "round_setting_id", name="uq_round_groups_round_setting"),
    )
    op.create_index("idx_round_groups_round", "round_groups", ["round_id"], unique=False)
    op.create_index("idx_round_groups_setting", "round_groups", ["round_setting_id"], unique=False)
    op.create_table(
        "run_constraints_snapshot",
        sa.Column("snapshot_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column("phase", sa.Text(), nullable=False),
        sa.Column("constraints_json", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.CheckConstraint(
            "phase IN ('P2','P3','COMPOSITE')",
            name=op.f("ck_run_constraints_snapshot_chk_run_constraints_snapshot_phase"),
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["scheduling_runs.run_id"],
            name=op.f("fk_run_constraints_snapshot_scheduling_runs_run_id"),
        ),
        sa.PrimaryKeyConstraint("snapshot_id", name=op.f("pk_run_constraints_snapshot")),
    )
    op.create_index(
        "idx_run_constraints_snapshot_run",
        "run_constraints_snapshot",
        ["run_id"],
        unique=False,
    )
    op.create_table(
        "run_exports",
        sa.Column("export_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column("export_type", sa.Text(), nullable=False),
        sa.Column("file_path", sa.Text(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.CheckConstraint(
            "export_type IN ('CSV','PDF','ZIP','XLSX')",
            name=op.f("ck_run_exports_chk_run_exports_export_type"),
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["scheduling_runs.run_id"],
            name=op.f("fk_run_exports_scheduling_runs_run_id"),
        ),
        sa.PrimaryKeyConstraint("export_id", name=op.f("pk_run_exports")),
        sa.UniqueConstraint("file_path", name="uq_run_exports_file_path"),
        sa.UniqueConstraint("run_id", "export_type", name="uq_run_exports_run_type"),
    )
    op.create_index("idx_run_exports_run", "run_exports", ["run_id"], unique=False)
    op.create_table(
        "scheduling_locks",
        sa.Column("lock_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("season_day_id", sa.Integer(), nullable=False),
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column(
            "locked_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("locked_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["locked_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_scheduling_locks_users_locked_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["scheduling_runs.run_id"],
            name=op.f("fk_scheduling_locks_scheduling_runs_run_id"),
        ),
        sa.ForeignKeyConstraint(
            ["season_day_id"],
            ["season_days.season_day_id"],
            name=op.f("fk_scheduling_locks_season_days_season_day_id"),
        ),
        sa.PrimaryKeyConstraint("lock_id", name=op.f("pk_scheduling_locks")),
    )
    op.create_index(
        "uq_scheduling_locks_season_day",
        "scheduling_locks",
        ["season_day_id"],
        unique=True,
    )
    op.create_table(
        "scheduling_run_events",
        sa.Column("event_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column(
            "event_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("stage", sa.Text(), nullable=False),
        sa.Column("severity", sa.Text(), nullable=False),
        sa.Column("event_message", sa.Text(), nullable=False),
        sa.Column("context", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.CheckConstraint(
            "severity IN ('INFO','WARN','ERROR')",
            name=op.f("ck_scheduling_run_events_chk_run_events_severity"),
        ),
        sa.CheckConstraint(
            "stage IN ('STEP1','STEP2','STEP3','STEP4','STEP5','FINALISE')",
            name=op.f("ck_scheduling_run_events_chk_run_events_stage"),
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["scheduling_runs.run_id"],
            name=op.f("fk_scheduling_run_events_scheduling_runs_run_id"),
        ),
        sa.PrimaryKeyConstraint("event_id", name=op.f("pk_scheduling_run_events")),
    )
    op.create_index("idx_run_events_run", "scheduling_run_events", ["run_id"], unique=False)
    op.create_index("idx_run_events_severity", "scheduling_run_events", ["severity"], unique=False)
    op.create_index("idx_run_events_stage", "scheduling_run_events", ["stage"], unique=False)
    op.create_index("idx_run_events_time", "scheduling_run_events", ["event_time"], unique=False)
    op.create_table(
        "staging_diffs",
        sa.Column("diff_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column("entity_type", sa.Text(), nullable=False),
        sa.Column("entity_id", sa.Text(), nullable=False),
        sa.Column("change_type", sa.Text(), nullable=False),
        sa.Column("before_json", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("after_json", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "change_type IN ('ADD','CHANGE','REMOVE')",
            name=op.f("ck_staging_diffs_chk_staging_diffs_change_type"),
        ),
        sa.CheckConstraint(
            "entity_type IN ('P2_ALLOCATION','P3_ALLOCATION','COMPOSITE_ALLOCATION')",
            name=op.f("ck_staging_diffs_chk_staging_diffs_entity_type"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_staging_diffs_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["scheduling_runs.run_id"],
            name=op.f("fk_staging_diffs_scheduling_runs_run_id"),
        ),
        sa.PrimaryKeyConstraint("diff_id", name=op.f("pk_staging_diffs")),
    )
    op.create_index(
        "idx_staging_diffs_entity",
        "staging_diffs",
        ["entity_type", "entity_id"],
        unique=False,
    )
    op.create_index("idx_staging_diffs_run", "staging_diffs", ["run_id"], unique=False)
    op.create_table(
        "age_court_restrictions",
        sa.Column("age_court_restriction_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("round_setting_id", sa.Integer(), nullable=False),
        sa.Column("age_id", sa.Integer(), nullable=False),
        sa.Column("court_time_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["age_id"],
            ["ages.age_id"],
            name=op.f("fk_age_court_restrictions_ages_age_id"),
        ),
        sa.ForeignKeyConstraint(
            ["court_time_id"],
            ["court_times.court_time_id"],
            name=op.f("fk_age_court_restrictions_court_times_court_time_id"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_age_court_restrictions_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_setting_id"],
            ["round_settings.round_setting_id"],
            name=op.f("fk_age_court_restrictions_round_settings_round_setting_id"),
        ),
        sa.PrimaryKeyConstraint("age_court_restriction_id", name=op.f("pk_age_court_restrictions")),
        sa.UniqueConstraint(
            "round_setting_id",
            "age_id",
            "court_time_id",
            name="uq_age_court_restrictions_key",
        ),
    )
    op.create_index(
        "idx_age_court_restrictions_keys",
        "age_court_restrictions",
        ["round_setting_id", "age_id", "court_time_id"],
        unique=False,
    )
    op.create_table(
        "allocation_settings",
        sa.Column("allocation_setting_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("round_setting_id", sa.Integer(), nullable=False),
        sa.Column("age_id", sa.Integer(), nullable=False),
        sa.Column("grade_id", sa.Integer(), nullable=False),
        sa.Column("restricted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=True),
        sa.Column(
            "restriction_type",
            sa.Text(),
            server_default=sa.text("'NONE'"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_by_user_id", sa.Integer(), nullable=True),
        sa.CheckConstraint(
            "restriction_type IN ('NONE','AGE','GRADE','DUAL')",
            name=op.f("ck_allocation_settings_chk_allocation_settings_restriction_type"),
        ),
        sa.ForeignKeyConstraint(["age_id"], ["ages.age_id"], name=op.f("fk_allocation_settings_ages_age_id")),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_allocation_settings_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["grade_id"],
            ["grades.grade_id"],
            name=op.f("fk_allocation_settings_grades_grade_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_setting_id"],
            ["round_settings.round_setting_id"],
            name=op.f("fk_allocation_settings_round_settings_round_setting_id"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_allocation_settings_users_updated_by_user_id"),
        ),
        sa.PrimaryKeyConstraint("allocation_setting_id", name=op.f("pk_allocation_settings")),
    )
    op.create_table(
        "grade_court_restrictions",
        sa.Column(
            "grade_court_restriction_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("round_setting_id", sa.Integer(), nullable=False),
        sa.Column("grade_id", sa.Integer(), nullable=False),
        sa.Column("court_time_id", sa.Integer(), nullable=False),
        sa.Column("restriction_type", sa.Text(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "restriction_type IN ('GRADE','DUAL')",
            name=op.f("ck_grade_court_restrictions_chk_grade_court_restrictions_type"),
        ),
        sa.ForeignKeyConstraint(
            ["court_time_id"],
            ["court_times.court_time_id"],
            name=op.f("fk_grade_court_restrictions_court_times_court_time_id"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_grade_court_restrictions_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["grade_id"],
            ["grades.grade_id"],
            name=op.f("fk_grade_court_restrictions_grades_grade_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_setting_id"],
            ["round_settings.round_setting_id"],
            name=op.f("fk_grade_court_restrictions_round_settings_round_setting_id"),
        ),
        sa.PrimaryKeyConstraint("grade_court_restriction_id", name=op.f("pk_grade_court_restrictions")),
        sa.UniqueConstraint(
            "round_setting_id",
            "grade_id",
            "court_time_id",
            name="uq_grade_court_restrictions_key",
        ),
    )
    op.create_index(
        "idx_grade_court_restrictions_keys",
        "grade_court_restrictions",
        ["round_setting_id", "grade_id", "court_time_id"],
        unique=False,
    )
    op.create_table(
        "grade_round_constraints",
        sa.Column(
            "grade_round_constraint_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("round_setting_id", sa.Integer(), nullable=False),
        sa.Column("age_id", sa.Integer(), nullable=False),
        sa.Column("grade_id", sa.Integer(), nullable=False),
        sa.Column("active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["age_id"],
            ["ages.age_id"],
            name=op.f("fk_grade_round_constraints_ages_age_id"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_grade_round_constraints_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["grade_id"],
            ["grades.grade_id"],
            name=op.f("fk_grade_round_constraints_grades_grade_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_setting_id"],
            ["round_settings.round_setting_id"],
            name=op.f("fk_grade_round_constraints_round_settings_round_setting_id"),
        ),
        sa.PrimaryKeyConstraint("grade_round_constraint_id", name=op.f("pk_grade_round_constraints")),
        sa.UniqueConstraint("round_setting_id", "grade_id", name="uq_grade_round_constraints_key"),
    )
    op.create_index(
        "idx_grade_round_constraints_keys",
        "grade_round_constraints",
        ["round_setting_id", "grade_id"],
        unique=False,
    )
    op.create_table(
        "p2_allocations",
        sa.Column("p2_allocation_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column("round_id", sa.Integer(), nullable=False),
        sa.Column("age_id", sa.Integer(), nullable=False),
        sa.Column("grade_id", sa.Integer(), nullable=False),
        sa.Column("court_time_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["age_id"], ["ages.age_id"], name=op.f("fk_p2_allocations_ages_age_id")),
        sa.ForeignKeyConstraint(
            ["court_time_id"],
            ["court_times.court_time_id"],
            name=op.f("fk_p2_allocations_court_times_court_time_id"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_p2_allocations_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["grade_id"],
            ["grades.grade_id"],
            name=op.f("fk_p2_allocations_grades_grade_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_id"],
            ["rounds.round_id"],
            name=op.f("fk_p2_allocations_rounds_round_id"),
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["scheduling_runs.run_id"],
            name=op.f("fk_p2_allocations_scheduling_runs_run_id"),
        ),
        sa.PrimaryKeyConstraint("p2_allocation_id", name=op.f("pk_p2_allocations")),
        sa.UniqueConstraint("run_id", "round_id", "court_time_id", name="uq_p2_allocations_run_round_ct"),
    )
    op.create_index("idx_p2_allocations_ct", "p2_allocations", ["court_time_id"], unique=False)
    op.create_index(
        "idx_p2_allocations_run_round",
        "p2_allocations",
        ["run_id", "round_id"],
        unique=False,
    )
    op.create_table(
        "teams",
        sa.Column("team_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("grade_id", sa.Integer(), nullable=False),
        sa.Column("team_code", sa.String(length=20), nullable=False),
        sa.Column("team_name", sa.Text(), nullable=True),
        sa.Column("active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_teams_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(["grade_id"], ["grades.grade_id"], name=op.f("fk_teams_grades_grade_id")),
        sa.PrimaryKeyConstraint("team_id", name=op.f("pk_teams")),
        sa.UniqueConstraint("grade_id", "team_code", name="uq_teams_grade_code"),
        sa.UniqueConstraint("grade_id", "team_name", name="uq_teams_grade_name"),
    )
    op.create_index("idx_teams_active", "teams", ["active"], unique=False)
    op.create_index("idx_teams_grade", "teams", ["grade_id"], unique=False)
    op.create_table(
        "final_bye_schedule",
        sa.Column("final_bye_schedule_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column("round_id", sa.Integer(), nullable=False),
        sa.Column("age_id", sa.Integer(), nullable=False),
        sa.Column("grade_id", sa.Integer(), nullable=False),
        sa.Column("team_id", sa.Integer(), nullable=False),
        sa.Column("bye_date", sa.Date(), nullable=False),
        sa.Column("bye_name", sa.Text(), nullable=False),
        sa.Column("organisation_name", sa.Text(), nullable=False),
        sa.Column("competition_name", sa.Text(), nullable=False),
        sa.Column("season_name", sa.Text(), nullable=False),
        sa.Column("gender", sa.Text(), nullable=True),
        sa.Column("age_name", sa.Text(), nullable=False),
        sa.Column("grade_name", sa.Text(), nullable=False),
        sa.Column("team_name", sa.Text(), nullable=False),
        sa.Column("bye_reason", sa.Text(), nullable=False),
        sa.Column("published_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("published_by_user_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "bye_reason IN ('ODD_TEAMS','ERROR_LOOP','CONSTRAINT','MANUAL_OVERRIDE')",
            name=op.f("ck_final_bye_schedule_chk_final_byes_reason"),
        ),
        sa.ForeignKeyConstraint(["age_id"], ["ages.age_id"], name=op.f("fk_final_bye_schedule_ages_age_id")),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_final_bye_schedule_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["grade_id"],
            ["grades.grade_id"],
            name=op.f("fk_final_bye_schedule_grades_grade_id"),
        ),
        sa.ForeignKeyConstraint(
            ["published_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_final_bye_schedule_users_published_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_id"],
            ["rounds.round_id"],
            name=op.f("fk_final_bye_schedule_rounds_round_id"),
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["scheduling_runs.run_id"],
            name=op.f("fk_final_bye_schedule_scheduling_runs_run_id"),
        ),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["teams.team_id"],
            name=op.f("fk_final_bye_schedule_teams_team_id"),
        ),
        sa.PrimaryKeyConstraint("final_bye_schedule_id", name=op.f("pk_final_bye_schedule")),
        sa.UniqueConstraint("round_id", "team_id", name="uq_final_byes_round_team"),
    )
    op.create_index("idx_final_byes_round", "final_bye_schedule", ["round_id"], unique=False)
    op.create_index("idx_final_byes_team", "final_bye_schedule", ["team_id"], unique=False)
    op.create_table(
        "final_game_schedule",
        sa.Column("final_game_schedule_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column("round_id", sa.Integer(), nullable=False),
        sa.Column("age_id", sa.Integer(), nullable=False),
        sa.Column("grade_id", sa.Integer(), nullable=False),
        sa.Column("team_a_id", sa.Integer(), nullable=False),
        sa.Column("team_b_id", sa.Integer(), nullable=False),
        sa.Column("court_time_id", sa.Integer(), nullable=False),
        sa.Column("game_date", sa.Date(), nullable=False),
        sa.Column("game_name", sa.Text(), nullable=False),
        sa.Column("organisation_name", sa.Text(), nullable=False),
        sa.Column("competition_name", sa.Text(), nullable=False),
        sa.Column("season_name", sa.Text(), nullable=False),
        sa.Column("gender", sa.Text(), nullable=True),
        sa.Column("venue_name", sa.Text(), nullable=False),
        sa.Column("court_name", sa.Text(), nullable=False),
        sa.Column("start_time", sa.Time(), nullable=False),
        sa.Column("age_name", sa.Text(), nullable=False),
        sa.Column("grade_name", sa.Text(), nullable=False),
        sa.Column("team_a_name", sa.Text(), nullable=False),
        sa.Column("team_b_name", sa.Text(), nullable=False),
        sa.Column(
            "game_status",
            sa.Text(),
            server_default=sa.text("'FINALISED'"),
            nullable=True,
        ),
        sa.Column("published_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("published_by_user_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "(game_status IS NULL) OR (game_status IN ('FINALISED','CANCELLED','FORFEITED','COMPLETED'))",
            name=op.f("ck_final_game_schedule_chk_final_games_game_status"),
        ),
        sa.ForeignKeyConstraint(["age_id"], ["ages.age_id"], name=op.f("fk_final_game_schedule_ages_age_id")),
        sa.ForeignKeyConstraint(
            ["court_time_id"],
            ["court_times.court_time_id"],
            name=op.f("fk_final_game_schedule_court_times_court_time_id"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_final_game_schedule_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["grade_id"],
            ["grades.grade_id"],
            name=op.f("fk_final_game_schedule_grades_grade_id"),
        ),
        sa.ForeignKeyConstraint(
            ["published_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_final_game_schedule_users_published_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_id"],
            ["rounds.round_id"],
            name=op.f("fk_final_game_schedule_rounds_round_id"),
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["scheduling_runs.run_id"],
            name=op.f("fk_final_game_schedule_scheduling_runs_run_id"),
        ),
        sa.ForeignKeyConstraint(
            ["team_a_id"],
            ["teams.team_id"],
            name=op.f("fk_final_game_schedule_teams_team_a_id"),
        ),
        sa.ForeignKeyConstraint(
            ["team_b_id"],
            ["teams.team_id"],
            name=op.f("fk_final_game_schedule_teams_team_b_id"),
        ),
        sa.PrimaryKeyConstraint("final_game_schedule_id", name=op.f("pk_final_game_schedule")),
        sa.UniqueConstraint("round_id", "court_time_id", name="uq_final_games_round_ct"),
    )
    op.create_index("idx_final_games_ct", "final_game_schedule", ["court_time_id"], unique=False)
    op.create_index("idx_final_games_round", "final_game_schedule", ["round_id"], unique=False)
    op.create_table(
        "p3_bye_allocations",
        sa.Column("p3_bye_allocation_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column("round_id", sa.Integer(), nullable=False),
        sa.Column("age_id", sa.Integer(), nullable=False),
        sa.Column("grade_id", sa.Integer(), nullable=False),
        sa.Column("team_id", sa.Integer(), nullable=False),
        sa.Column("bye_reason", sa.Text(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "bye_reason IN ('ODD_TEAMS','ERROR_LOOP','CONSTRAINT','MANUAL_OVERRIDE')",
            name=op.f("ck_p3_bye_allocations_chk_p3_byes_reason"),
        ),
        sa.ForeignKeyConstraint(["age_id"], ["ages.age_id"], name=op.f("fk_p3_bye_allocations_ages_age_id")),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_p3_bye_allocations_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["grade_id"],
            ["grades.grade_id"],
            name=op.f("fk_p3_bye_allocations_grades_grade_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_id"],
            ["rounds.round_id"],
            name=op.f("fk_p3_bye_allocations_rounds_round_id"),
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["scheduling_runs.run_id"],
            name=op.f("fk_p3_bye_allocations_scheduling_runs_run_id"),
        ),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["teams.team_id"],
            name=op.f("fk_p3_bye_allocations_teams_team_id"),
        ),
        sa.PrimaryKeyConstraint("p3_bye_allocation_id", name=op.f("pk_p3_bye_allocations")),
        sa.UniqueConstraint("run_id", "round_id", "team_id", name="uq_p3_byes_run_round_team"),
    )
    op.create_index(
        "idx_p3_byes_run_round",
        "p3_bye_allocations",
        ["run_id", "round_id"],
        unique=False,
    )
    op.create_index("idx_p3_byes_team", "p3_bye_allocations", ["team_id"], unique=False)
    op.create_table(
        "p3_game_allocations",
        sa.Column("p3_game_allocation_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column("p2_allocation_id", sa.Integer(), nullable=True),
        sa.Column("round_id", sa.Integer(), nullable=False),
        sa.Column("age_id", sa.Integer(), nullable=False),
        sa.Column("grade_id", sa.Integer(), nullable=False),
        sa.Column("team_a_id", sa.Integer(), nullable=False),
        sa.Column("team_b_id", sa.Integer(), nullable=False),
        sa.Column("court_time_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["age_id"], ["ages.age_id"], name=op.f("fk_p3_game_allocations_ages_age_id")),
        sa.ForeignKeyConstraint(
            ["court_time_id"],
            ["court_times.court_time_id"],
            name=op.f("fk_p3_game_allocations_court_times_court_time_id"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_p3_game_allocations_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["grade_id"],
            ["grades.grade_id"],
            name=op.f("fk_p3_game_allocations_grades_grade_id"),
        ),
        sa.ForeignKeyConstraint(
            ["p2_allocation_id"],
            ["p2_allocations.p2_allocation_id"],
            name=op.f("fk_p3_game_allocations_p2_allocations_p2_allocation_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_id"],
            ["rounds.round_id"],
            name=op.f("fk_p3_game_allocations_rounds_round_id"),
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["scheduling_runs.run_id"],
            name=op.f("fk_p3_game_allocations_scheduling_runs_run_id"),
        ),
        sa.ForeignKeyConstraint(
            ["team_a_id"],
            ["teams.team_id"],
            name=op.f("fk_p3_game_allocations_teams_team_a_id"),
        ),
        sa.ForeignKeyConstraint(
            ["team_b_id"],
            ["teams.team_id"],
            name=op.f("fk_p3_game_allocations_teams_team_b_id"),
        ),
        sa.PrimaryKeyConstraint("p3_game_allocation_id", name=op.f("pk_p3_game_allocations")),
        sa.UniqueConstraint("run_id", "round_id", "court_time_id", name="uq_p3_games_run_round_ct"),
    )
    op.create_index("idx_p3_games_ct", "p3_game_allocations", ["court_time_id"], unique=False)
    op.create_index(
        "idx_p3_games_run_round",
        "p3_game_allocations",
        ["run_id", "round_id"],
        unique=False,
    )
    op.create_index(
        "idx_p3_games_teams",
        "p3_game_allocations",
        ["team_a_id", "team_b_id"],
        unique=False,
    )
    op.create_table(
        "saved_byes",
        sa.Column("saved_bye_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column("round_id", sa.Integer(), nullable=False),
        sa.Column("age_id", sa.Integer(), nullable=False),
        sa.Column("grade_id", sa.Integer(), nullable=False),
        sa.Column("team_id", sa.Integer(), nullable=False),
        sa.Column("bye_reason", sa.Text(), nullable=True),
        sa.Column("game_status", sa.Text(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "(bye_reason IS NULL) OR (bye_reason IN ('ODD_TEAMS','ERROR_LOOP','CONSTRAINT','MANUAL_OVERRIDE'))",
            name=op.f("ck_saved_byes_chk_saved_byes_bye_reason"),
        ),
        sa.CheckConstraint(
            "game_status IN ('AFTER_P2_BEFORE_P3','AFTER_P3_BEFORE_FINALISE','FINALISED')",
            name=op.f("ck_saved_byes_chk_saved_byes_game_status"),
        ),
        sa.ForeignKeyConstraint(["age_id"], ["ages.age_id"], name=op.f("fk_saved_byes_ages_age_id")),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_saved_byes_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["grade_id"],
            ["grades.grade_id"],
            name=op.f("fk_saved_byes_grades_grade_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_id"],
            ["rounds.round_id"],
            name=op.f("fk_saved_byes_rounds_round_id"),
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["scheduling_runs.run_id"],
            name=op.f("fk_saved_byes_scheduling_runs_run_id"),
        ),
        sa.ForeignKeyConstraint(["team_id"], ["teams.team_id"], name=op.f("fk_saved_byes_teams_team_id")),
        sa.PrimaryKeyConstraint("saved_bye_id", name=op.f("pk_saved_byes")),
        sa.UniqueConstraint("run_id", "round_id", "team_id", name="uq_saved_byes_run_round_team"),
    )
    op.create_index("idx_saved_byes_run_round", "saved_byes", ["run_id", "round_id"], unique=False)
    op.create_index("idx_saved_byes_team", "saved_byes", ["team_id"], unique=False)
    op.create_table(
        "saved_games",
        sa.Column("saved_game_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("run_id", sa.Integer(), nullable=False),
        sa.Column("round_id", sa.Integer(), nullable=False),
        sa.Column("age_id", sa.Integer(), nullable=False),
        sa.Column("grade_id", sa.Integer(), nullable=False),
        sa.Column("team_a_id", sa.Integer(), nullable=False),
        sa.Column("team_b_id", sa.Integer(), nullable=False),
        sa.Column("court_time_id", sa.Integer(), nullable=False),
        sa.Column("game_status", sa.Text(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("NOW()"),
            nullable=True,
        ),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "game_status IN ('AFTER_P2_BEFORE_P3','AFTER_P3_BEFORE_FINALISE','FINALISED')",
            name=op.f("ck_saved_games_chk_saved_games_game_status"),
        ),
        sa.ForeignKeyConstraint(["age_id"], ["ages.age_id"], name=op.f("fk_saved_games_ages_age_id")),
        sa.ForeignKeyConstraint(
            ["court_time_id"],
            ["court_times.court_time_id"],
            name=op.f("fk_saved_games_court_times_court_time_id"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"],
            ["users.user_account_id"],
            name=op.f("fk_saved_games_users_created_by_user_id"),
        ),
        sa.ForeignKeyConstraint(
            ["grade_id"],
            ["grades.grade_id"],
            name=op.f("fk_saved_games_grades_grade_id"),
        ),
        sa.ForeignKeyConstraint(
            ["round_id"],
            ["rounds.round_id"],
            name=op.f("fk_saved_games_rounds_round_id"),
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["scheduling_runs.run_id"],
            name=op.f("fk_saved_games_scheduling_runs_run_id"),
        ),
        sa.ForeignKeyConstraint(
            ["team_a_id"],
            ["teams.team_id"],
            name=op.f("fk_saved_games_teams_team_a_id"),
        ),
        sa.ForeignKeyConstraint(
            ["team_b_id"],
            ["teams.team_id"],
            name=op.f("fk_saved_games_teams_team_b_id"),
        ),
        sa.PrimaryKeyConstraint("saved_game_id", name=op.f("pk_saved_games")),
        sa.UniqueConstraint("run_id", "round_id", "court_time_id", name="uq_saved_games_run_round_ct"),
    )
    op.create_index("idx_saved_games_ct", "saved_games", ["court_time_id"], unique=False)
    op.create_index("idx_saved_games_run_round", "saved_games", ["run_id", "round_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_saved_games_run_round", table_name="saved_games")
    op.drop_index("idx_saved_games_ct", table_name="saved_games")
    op.drop_table("saved_games")
    op.drop_index("idx_saved_byes_team", table_name="saved_byes")
    op.drop_index("idx_saved_byes_run_round", table_name="saved_byes")
    op.drop_table("saved_byes")
    op.drop_index("idx_p3_games_teams", table_name="p3_game_allocations")
    op.drop_index("idx_p3_games_run_round", table_name="p3_game_allocations")
    op.drop_index("idx_p3_games_ct", table_name="p3_game_allocations")
    op.drop_table("p3_game_allocations")
    op.drop_index("idx_p3_byes_team", table_name="p3_bye_allocations")
    op.drop_index("idx_p3_byes_run_round", table_name="p3_bye_allocations")
    op.drop_table("p3_bye_allocations")
    op.drop_index("idx_final_games_round", table_name="final_game_schedule")
    op.drop_index("idx_final_games_ct", table_name="final_game_schedule")
    op.drop_table("final_game_schedule")
    op.drop_index("idx_final_byes_team", table_name="final_bye_schedule")
    op.drop_index("idx_final_byes_round", table_name="final_bye_schedule")
    op.drop_table("final_bye_schedule")
    op.drop_index("idx_teams_grade", table_name="teams")
    op.drop_index("idx_teams_active", table_name="teams")
    op.drop_table("teams")
    op.drop_index("idx_p2_allocations_run_round", table_name="p2_allocations")
    op.drop_index("idx_p2_allocations_ct", table_name="p2_allocations")
    op.drop_table("p2_allocations")
    op.drop_index("idx_grade_round_constraints_keys", table_name="grade_round_constraints")
    op.drop_table("grade_round_constraints")
    op.drop_index("idx_grade_court_restrictions_keys", table_name="grade_court_restrictions")
    op.drop_table("grade_court_restrictions")
    op.drop_table("allocation_settings")
    op.drop_index("idx_age_court_restrictions_keys", table_name="age_court_restrictions")
    op.drop_table("age_court_restrictions")
    op.drop_index("idx_staging_diffs_run", table_name="staging_diffs")
    op.drop_index("idx_staging_diffs_entity", table_name="staging_diffs")
    op.drop_table("staging_diffs")
    op.drop_index("idx_run_events_time", table_name="scheduling_run_events")
    op.drop_index("idx_run_events_stage", table_name="scheduling_run_events")
    op.drop_index("idx_run_events_severity", table_name="scheduling_run_events")
    op.drop_index("idx_run_events_run", table_name="scheduling_run_events")
    op.drop_table("scheduling_run_events")
    op.drop_index("uq_scheduling_locks_season_day", table_name="scheduling_locks")
    op.drop_table("scheduling_locks")
    op.drop_index("idx_run_exports_run", table_name="run_exports")
    op.drop_table("run_exports")
    op.drop_index("idx_run_constraints_snapshot_run", table_name="run_constraints_snapshot")
    op.drop_table("run_constraints_snapshot")
    op.drop_index("idx_round_groups_setting", table_name="round_groups")
    op.drop_index("idx_round_groups_round", table_name="round_groups")
    op.drop_table("round_groups")
    op.drop_index("idx_grades_age", table_name="grades")
    op.drop_table("grades")
    op.drop_index("idx_court_times_time_slot", table_name="court_times")
    op.drop_index("idx_court_times_day_setting", table_name="court_times")
    op.drop_index("idx_court_times_court", table_name="court_times")
    op.drop_table("court_times")
    op.drop_table("court_rankings")
    op.drop_index("idx_age_round_constraints_keys", table_name="age_round_constraints")
    op.drop_table("age_round_constraints")
    op.drop_index("idx_time_slots_start_end", table_name="time_slots")
    op.drop_index("idx_time_slots_day", table_name="time_slots")
    op.drop_table("time_slots")
    op.drop_index("idx_runs_status", table_name="scheduling_runs")
    op.drop_index("idx_runs_season_day", table_name="scheduling_runs")
    op.drop_index("idx_runs_created_by", table_name="scheduling_runs")
    op.drop_index("idx_runs_created_at", table_name="scheduling_runs")
    op.drop_table("scheduling_runs")
    op.drop_index("idx_round_settings_day", table_name="round_settings")
    op.drop_table("round_settings")
    op.drop_index("idx_round_dates_round", table_name="round_dates")
    op.drop_index("idx_round_dates_date", table_name="round_dates")
    op.drop_table("round_dates")
    op.drop_index("idx_ages_active", table_name="ages")
    op.drop_table("ages")
    op.drop_index("idx_season_days_week_day", table_name="season_days")
    op.drop_index("idx_season_days_season", table_name="season_days")
    op.drop_index("idx_season_days_active", table_name="season_days")
    op.drop_table("season_days")
    op.drop_table("rounds")
    op.drop_index("idx_seasons_visibility_active", table_name="seasons")
    op.drop_index("idx_seasons_created_by", table_name="seasons")
    op.drop_index("idx_seasons_comp", table_name="seasons")
    op.drop_table("seasons")
    op.drop_index("idx_courts_venue", table_name="courts")
    op.drop_index("idx_courts_active", table_name="courts")
    op.drop_table("courts")
    op.drop_index("idx_venues_created_by", table_name="venues")
    op.drop_table("venues")
    op.drop_index("idx_user_permissions_user", table_name="user_permissions")
    op.drop_index("idx_user_permissions_org", table_name="user_permissions")
    op.drop_table("user_permissions")
    op.drop_index("idx_competitions_org", table_name="competitions")
    op.drop_index("idx_competitions_created_by", table_name="competitions")
    op.drop_table("competitions")
    op.drop_table("public_holidays")
    op.drop_index("idx_organisations_created_by", table_name="organisations")
    op.drop_table("organisations")
    op.drop_table("users")
    op.drop_index("idx_default_times_time_value", table_name="default_times")
    op.drop_table("default_times")
    op.drop_index("idx_dates_date_value", table_name="dates")
    op.drop_table("dates")
    # ### end Alembic commands ###
