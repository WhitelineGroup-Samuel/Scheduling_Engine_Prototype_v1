# =============================================================================
# File: pyproject.toml
# Purpose:
#   Central tool configuration: package metadata (if any) and dev tools
#   (black, isort, ruff, mypy, sqlfluff, pytest). Ensures reproducible style.
#
# Responsibilities:
#   - Define tool.[black|isort|ruff|mypy|pytest|sqlfluff] sections.
#   - Pin Python version and include-only paths (app/, tests/).
#   - Optionally declare project metadata if packaging later.
#
# Collaborators:
#   - mypy.ini/ruff.toml/pytest.ini (can be embedded here or separate).
# =============================================================================

[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "scheduling-engine"
version = "0.1.0"
description = "Whiteline SportsHub â€” Scheduling Engine (Back-End Prototype)"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
  # Runtime
  "SQLAlchemy>=2.0,<3.0",
  "alembic>=1.13,<2.0",
  "pydantic[email]>=2.11,<3.0",
  "python-dotenv>=1.0,<2.0",
  "click>8.1.7,<8.2",
  "typer>=0.12,<0.13",
  "psycopg[binary]>=3.1",
  "psycopg-pool>=3.2",
  # Logging (JSON formatter helper; optional but useful for Step 13)
  "python-json-logger>=2.0,<3.0",
]

[project.optional-dependencies]
dev = [
  # Lint/format/type/test/tooling
  "ruff>=0.6,<1.0",
  "black>=24.8,<25.0",
  "mypy>=1.11,<2.0",
  "pytest>=8.3,<9.0",
  "pytest-cov>=5.0,<6.0",
  "pre-commit>=3.7,<4.0",
  "sqlfluff>=3.0,<4.0",
  "pip-audit>=2.7,<3.0",
]

[tool.setuptools]
packages = { find = { where = [
  "",
], include = [
  "app*",
], exclude = [
  "tests*",
  "sql*",
  "logs*",
  "migrations*",
  "project_files*",
  "docs*",
  ".github*",
  ".vscode*",
] } }
include-package-data = false

[tool.black]
line-length = 150
target-version = ["py312"]

[tool.ruff]
target-version = "py312"
line-length = 150
src = ["app", "tests", "scripts"]
extend-exclude = [
  ".venv",
  ".git",
  ".mypy_cache",
  ".ruff_cache",
  ".pytest_cache",
  "dist",
  "build",
  "migrations",
  "sql",                      # handled by SQLFluff
  "project_files",
  "docs",
  "private_documentation",
  "logs",
  "reports",
  "backups",
]

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint]
extend-select = ["E", "F", "I", "UP", "B", "C4", "ICN", "ARG"]     # isort via Ruff
ignore = ["D203"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["ARG001", "ARG002", "UP022", "B017", "UP035", "E501"]
"migrations/**" = ["E501", "SIM103", "SIM105", "SIM108", "ARG001", "ARG002"]
"scripts/**" = ["E501", "SIM103", "SIM105", "SIM108", "C401", "E702", "ARG001", "ARG002", "UP022"]
"app/models/**" = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-q -ra --strict-markers --disable-warnings"
markers = [
  "integration: marks tests that hit DB or external systems",
  "slow: marks tests as slow",
]

[tool.sqlfluff.core]
dialect = "ansi"
templater = "jinja"
sql_file_exts = ".sql"

[tool.sqlfluff.indentation]
tab_space_size = 2
indented_joins = true

[tool.sqlfluff.rules]
tab_space_size = 2

[tool.sqlfluff.layout.type.comma]
line_position = "trailing"

[tool.pyright]
# Match mypy's intent but keep editor fast:
typeCheckingMode = "basic"
pythonVersion = "3.12"

# Ensure Pyright uses your workspace venv (same as mypy/pre-commit/CI)
venvPath = "."
venv = ".venv"

# Mirror mypy's excludes to avoid editor-only noise
exclude = [
  "migrations",
  "tests/fixtures",
  "scripts/wizards",
  "reports",
  "backups",
  "private_documentation",
  "docs",
  "sql",
  "logs",
  ".venv",
  ".mypy_cache",
  ".ruff_cache",
  ".pytest_cache",
]

# Quieter when libraries lack stubs; mypy handles typing in CI anyway
reportMissingTypeStubs = "none"
